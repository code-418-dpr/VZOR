services:
  backend:
    build:
      context: ./services/VZOR-backend
      dockerfile: src/VZOR.Web/Dockerfile
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - minio
    networks:
      - vzor-network

  cv:
    build:
      context: ./services/VZOR-cv
      dockerfile: ./Dockerfile
    restart: unless-stopped
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      GRPC_PORT: 50051
      # - SEQ_URL=http://localhost:5431/
    ports:
      - "50051:50051"
    depends_on:
      - backend
    networks:
      - vzor-network

  frontend:
    build:
      context: ./services/VZOR-frontend
      dockerfile: ./Dockerfile
    restart: unless-stopped
    environment:
      FRONTEND_BACKEND_URL: http://backend:8080/api
      FRONTEND_FRONTEND_SESSION_SECRET: zH4BtsG3t8zg4sRNtzzLLXNvteZluwz0
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - vzor-network

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: "vzor"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "345890"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U postgres -d vzor",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vzor-network

  seq:
    image: datalust/seq:2024
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:5341"
      - "8081:80"
    networks:
      - vzor-network

  redis:
    image: redis:8.0-M03-alpine3.21
    environment:
      - REDIS_PASSWORD=12345
      - REDIS_USER=admin
      - REDIS_USER_PASSWORD=12345
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    networks:
      - vzor-network

  mongodb:
    image: mongo:4.4.6
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongoadmin"
      MONGO_INITDB_ROOT_PASSWORD: "mongopassword"
      MONGO_INITDB_DATABASE: "vzor"
    ports:
      - "27017:27017"
    networks:
      - vzor-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server --console-address ":9001" /data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - vzor-network
        
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - vzor-network


volumes:
  postgres-data:
  redis-data:
  minio-data:
  elasticsearch-data:

networks:
  vzor-network:
    driver: bridge
